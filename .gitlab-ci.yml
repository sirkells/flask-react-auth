image: docker:stable

stages:
  - build
  - test

variables:
  IMAGE: ${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}

build:users:
  stage: build
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $IMAGE:users || true
    - docker build
      --cache-from $IMAGE:users
      --tag $IMAGE:users
      --file ./services/users/Dockerfile.prod
      --build-arg SECRET_KEY=$SECRET_KEY
      "./services/users"
    - docker push $IMAGE:users

build:client:
  stage: build
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
    REACT_APP_USERS_SERVICE_URL: http://localhost:5001
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $IMAGE:client || true
    - docker build
      --cache-from $IMAGE:client
      --tag $IMAGE:client
      --file ./services/client/Dockerfile.ci
      "./services/client"
    - docker push $IMAGE:client

build:heroku:
  stage: build
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
    HEROKU_APP_NAME: fast-escarpment-38210
    HEROKU_REGISTRY_IMAGE: registry.heroku.com/${HEROKU_APP_NAME}/web
  script:
    - apk add --no-cache curl
    - chmod +x ./release.sh
    - docker build
      --tag $HEROKU_REGISTRY_IMAGE
      --file ./Dockerfile.deploy
      "."
    - docker login -u _ -p $HEROKU_AUTH_TOKEN registry.heroku.com
    - docker push $HEROKU_REGISTRY_IMAGE
    - ./release.sh

test:users:
  stage: test
  image: $IMAGE:users
  services:
    - postgres:latest
  variables:
    POSTGRES_DB: users
    POSTGRES_USER: runner
    POSTGRES_PASSWORD: runner
    DATABASE_TEST_URL: postgres://runner:runner@postgres:5432/users
    FLASK_ENV: development
  script:
    - cd /usr/src/app
    - pip install -r requirements-dev.txt
    - python -m pytest "app/tests" -p no:warnings
    # - python -m flake8 app
    - python -m black app --check
    # - python -m isort app/**/*.py --check-only

test:client:
  stage: test
  image: $IMAGE:client
  script:
    - cd /usr/src/app
    - npm run prettier:check
    # - npm run lint
    - npm run test
  # Here, we defined two stages, build and test, each having two jobs:
  #   build:users
  #   build:client
  #   test:users
  #   test:client
  #   In the build stages, we:
  #   Log in to the GitLab Container Registry
  #   Pull the previously pushed image (if it exists)
  #   Build and tag the new image
  #   Push the image up to the GitLab Container Registry
  #   Using the images created in the build stages, we then run the appropriate tests in the test stages.
# deploy:
#     stage: deploy
#     services:
#         - docker:dind
#     variables:
#         DOCKER_DRIVER: overlay2
#         HEROKU_APP_NAME: fast-escarpment-38210
#         HEROKU_REGISTRY_IMAGE: registry.heroku.com/${HEROKU_APP_NAME}/web
#     script:
#         - apk add --no-cache curl
#         - chmod +x ./release.sh
#         - docker build
#             --tag $HEROKU_REGISTRY_IMAGE
#             --file ./Dockerfile.prod
#             --build-arg SECRET_KEY=$SECRET_KEY
#             "."
#         - docker login -u _ -p $HEROKU_AUTH_TOKEN registry.heroku.com
#         - docker push $HEROKU_REGISTRY_IMAGE
#         - ./release.sh
